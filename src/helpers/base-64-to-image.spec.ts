import { PassFromBase64ToImage, Base64ToImage } from './base-64-to-image'

const makeSut = (): Base64ToImage => {
  return new PassFromBase64ToImage()
}
const makeBase64 = (): string => {
  return ''
}
const makeBase64WithHeader = (): string => {
  return String('data:image/png;base64,').concat(makeBase64())
}
describe('Base64ToImage', () => {
  test('Should throws if a string is not a base64', async () => {
    const sut = makeSut()
    const promise = sut.toImage('', { path: './', fileExtension: 'jpg', fileName: 'any_name' })
    await expect(promise).rejects.toThrow()
  })
  test('Should save image with header in base64', async () => {
    const sut = makeSut()
    const promise = sut.toImage(makeBase64WithHeader(), { path: './', fileExtension: 'jpg' })
    await expect(promise).toBeTruthy()
  })
  test('Should save image without header in base64', async () => {
    const sut = makeSut()
    const promise = sut.toImage(makeBase64(), { path: './', fileExtension: 'jpg' })
    await expect(promise).toBeTruthy()
  })
  test('Should save image with a random name if a name is not provided', async () => {
    const sut = makeSut()
    const promise = sut.toImage(makeBase64(), { path: './', fileExtension: 'jpg' })
    await expect(promise).toBeTruthy()
  })
  test('Should save image with a name provided', async () => {
    const sut = makeSut()
    const promise = sut.toImage(makeBase64(), { path: './', fileExtension: 'jpg', fileName: 'any_name' })
    await expect(promise).toBeTruthy()
  })
  test('Should save image with a extension provided', async () => {
    const sut = makeSut()
    const promise = sut.toImage(makeBase64(), { path: './', fileExtension: 'jpeg', fileName: 'any_name_with_extension' })
    await expect(promise).toBeTruthy()
  })
  test('Should save image with a default extension if is not provided', async () => {
    const sut = makeSut()
    const promise = sut.toImage(makeBase64(), { path: './', fileName: 'any_name_without_extension' })
    await expect(promise).toBeTruthy()
  })
  test('Should save image with a default extension if is not provided', async () => {
    const sut = makeSut()
    const promise = sut.toImage('asdjkasdjhajd', { path: './', fileName: 'not_a_base64' })
    await expect(promise).toBeTruthy()
  })
})
